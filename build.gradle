plugins {
    id 'application'
    id 'jacoco'
    id 'org.springframework.boot' version '2.6.13'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'checkstyle'
    id 'com.adarshr.test-logger' version '3.2.0'
    //front
    id 'org.siouan.frontend-jdk11' version '6.0.0'
    //swagger
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
    id 'com.github.johnrengelman.processes' version '0.5.0'

    //id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version '1.0-SNAPSHOT'

application {
    mainClass = 'hexlet.code.AppApplication'
}

repositories {
    mavenCentral()

}

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

dependencies {
    //spring, spring-test
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // db
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    //querydsl
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
    annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
    annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.12'

    //rollbar
    implementation 'com.rollbar:rollbar-spring-boot-webmvc:1.8.1'
}

openApi {
    apiDocsUrl.set("http://localhost:5000/v3/api-docs")
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

testlogger {
    showStandardStreams = false
}


//для работы с базой
diffChangeLog {
    dependsOn compileJava
}

liquibase {
    activities {
        main {
            // Указываем путь, по которому будет сгенерирован файл миграции
            changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
            // Указывем источник, с которым будут сравниваться изменения
            // Это база данных, изначально она пустая
            url 'jdbc:h2:./taskManager'
            // Имя пользователя и пароль для подключения к базе
            username ''
            password ''
            // Сравниваем с моделями, задавая пакет
            referenceUrl 'hibernate:spring:io.hexlet.javaspringblog.model.' +
            // Указываем диалект
                        '?dialect=org.hibernate.dialect.H2Dialect' +
            // Указываем правила именования таблиц и столбцов,
            // чтобы они соответствовали правилам Spring
                        '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
        }
    }
}

// для хероку
task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean


// Сборка фронтенда.
// Выполняется только если ничего не изменилось.
// *****************************************************************************
frontend {
    nodeVersion = '14.19.0'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************


